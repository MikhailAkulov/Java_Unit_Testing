package main.java.ru.gb.examples.Example_5.Tasks;

import org.junit.jupiter.api.Test;

/**
 * Задание 1.
 * Представьте, что вы работаете над разработкой простого приложения для записной книжки,
 * которое позволяет пользователям добавлять, редактировать и удалять контакты.
 * Ваша задача - придумать как можно больше различных тестов
 * (юнит-тесты, интеграционные тесты, сквозные тесты) для этого приложения.
 * Напишите название каждого теста, его тип и краткое описание того, что этот тест проверяет.
 */

public class NotebookAppTest {
    /**
     * Unit tests
     */
    //  1.
    @Test
    void testAddContact() {
        //  Создание нового контакта
        //  Сохранение его в список контактов
        //  Проверка успешного выполнения метода (assertTrue)
    }

    //  2.
    @Test
    void testFindContact() {
        //  Проверка наличия требуемого контакта в списке
        //  (Можно разбить на 3 теста: поиск по id, по ФИО, по номеру телефона)
    }

    //  3.
    @Test
    void testDeleteContact() {
        //  Получение требуемого контакта из списка
        //  Удаление контакта из списка
        //  Проверка, успешного выполнения метода (assertTrue)
    }

    //  4.
    @Test
    void testEditContact() {
        //  Получение требуемого контакта из списка
        //  Редактирование полей контакта
        //  Сохранение изменённого контакта
        //  Проверка, успешного выполнения метода (assertTrue)
    }

    //  5.
    @Test
    void testShowContactInfo() {
        //  Получение требуемого контакта из списка
        //  Проверка, правильного отображения полей контакта
    }

    /**
     * Integration tests
     */
    //  1.
    @Test
    void testAddingContactToNotebook() {
        //  Создание пустого (нового) списка контактов
        //  Добавление контакта с использованием соответствующего метода сервиса
        //  Проверка увеличение количества контактов в списке на 1
    }

    //  2.
    @Test
    void testDeletingContactFromNotebook() {
        //  Создание пустого (нового) списка контактов
        //  Добавление нескольких контактов с использованием соответствующего метода сервиса
        //  Удаление требуемого контакта -//-
        //  Проверка ожидаемого количества контактов в списке
    }

    //  3.
    @Test
    void testEditingContactInNotebook() {
        //  Создание пустого (нового) списка контактов
        //  Добавление нескольких контактов с использованием соответствующего метода сервиса
        //  Редактирование полей требуемого контакта -//-
        //  Проверка корректного отображения измененного контакта
        //  (а еще, возможно, не будет лишним проверить отсутствие дублированных контактов, после редактирования,
        //  для этого можно написать еще один тест)
    }

    /**
     * End-to-end test
     */
    @Test
    void testNotebookApp() {
        //  Создание новой записной книжки
        //  Добавление контактов
        //  Редактирование требуемых контактов
        //  Удаление требуемых контактов
        //  Проверка корректного ожидаемого результата в записной книжке и БД
    }
}
